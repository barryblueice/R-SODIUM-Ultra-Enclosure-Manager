; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "R-SODIUM Ultra SSD Enclosure Manager"
#define MyAppVersion "1.4.1"
#define MyAppPublisher "R-SODIUM Technology"
#define MyAppURL "https://github.com/barryblueice/R-SODIUM-Ultra-Enclosure-Manager"
#define MyAppExeName "R-SODIUM-Ultra-SSD-Enclosure-Manager.exe"
#define MyAppAssocName MyAppName + ""
#define MyAppAssocExt ".myp"
#define MyAppAssocKey StringChange(MyAppAssocName, " ", "") + MyAppAssocExt

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{1394752C-1881-448A-BBFF-3ACC6D38B4C8}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
UninstallDisplayIcon={app}\{#MyAppExeName}
; "ArchitecturesAllowed=x64compatible" specifies that Setup cannot run
; on anything but x64 and Windows 11 on Arm.
ArchitecturesAllowed=x64compatible
; "ArchitecturesInstallIn64BitMode=x64compatible" requests that the
; install be done in "64-bit mode" on x64 or Windows 11 on Arm,
; meaning it should use the native 64-bit Program Files directory and
; the 64-bit view of the registry.
ArchitecturesInstallIn64BitMode=x64compatible
ChangesAssociations=yes
DisableProgramGroupPage=yes
; Uncomment the following line to run in non administrative install mode (install for current user only).
;PrivilegesRequired=lowest
OutputDir=D:\Downloads
OutputBaseFilename=R-SODIUM-Ultra-Enclosure-Manager-Setup-{#MyAppVersion}
SetupIconFile=D:\Documents\test\Ultra-SSDBox-manager\icon.ico
Compression=lzma2/ultra64
SolidCompression=yes
CompressionThreads=auto
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "D:\Documents\test\Ultra-SSDBox-manager\output\main.dist\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Documents\test\Ultra-SSDBox-manager\output\main.dist\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Registry]
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocExt}\OpenWithProgids"; ValueType: string; ValueName: "{#MyAppAssocKey}"; ValueData: ""; Flags: uninsdeletevalue
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}"; ValueType: string; ValueName: ""; ValueData: "{#MyAppAssocName}"; Flags: uninsdeletekey
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\{#MyAppExeName},0"
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\{#MyAppExeName}"" ""%1"""

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[Code]
function IsAppInstalled(): Boolean;
var
  UninstallKey: string;
  InstallPath: string;
begin
  UninstallKey := 'Software\Microsoft\Windows\CurrentVersion\Uninstall\{1394752C-1881-448A-BBFF-3ACC6D38B4C8}_is1';
  Result := RegQueryStringValue(HKLM, UninstallKey, 'UninstallString', InstallPath) or
            RegQueryStringValue(HKCU, UninstallKey, 'UninstallString', InstallPath);
end;

function GetUninstallCommand(): String;
var
  UninstallKey: string;
  UninstallString: string;
begin
  UninstallKey := 'Software\Microsoft\Windows\CurrentVersion\Uninstall\{1394752C-1881-448A-BBFF-3ACC6D38B4C8}_is1';
  if RegQueryStringValue(HKLM, UninstallKey, 'UninstallString', UninstallString) then
  begin
    Result := UninstallString;
    Exit;
  end;
  if RegQueryStringValue(HKCU, UninstallKey, 'UninstallString', UninstallString) then
  begin
    Result := UninstallString;
    Exit;
  end;
  Result := '';
end;

procedure KillProcess(const FileName: string);
var
  ResultCode: Integer;
begin
Exec(ExpandConstant('{cmd}'), '/C taskkill /IM "' + FileName + '" /F', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
end;

procedure UninstallPreviousVersion();
var
  UninstallCmd: string;
  ResultCode: Integer;
begin
  UninstallCmd := GetUninstallCommand();
  if UninstallCmd <> '' then
  begin
    if MsgBox('A previous version of this application was found. Do you want to uninstall it before proceeding?', mbConfirmation, MB_YESNO) = IDYES then
    begin
      ShellExec('', UninstallCmd, '/SILENT', '', SW_SHOW, ewWaitUntilTerminated, ResultCode);
    end
    else
    begin
      MsgBox('Installation aborted.', mbInformation, MB_OK);
      Abort;
    end;
  end;
end;

procedure InitializeWizard();
begin
  KillProcess('{#MyAppExeName}');
  if IsAppInstalled() then
  begin
    UninstallPreviousVersion();
  end;
end;

